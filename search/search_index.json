{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation portal for all things Salesforce at NAV","text":"<p>Her we'll try to provide up to date information on how to design and develop on the Salesforce platform. In addition we provide an own section that discuss the businerss side of things. We also provide a FAQ that answers, well, the most frequently asked questions regarding Salesforce. Enjoy!</p>"},{"location":"README_BUSINESS/","title":"README BUSINESS","text":""},{"location":"README_BUSINESS/#business","title":"Business ....","text":""},{"location":"README_DESIGN/","title":"README DESIGN","text":""},{"location":"README_DESIGN/#introduction-to-designing-with-salesforce","title":"Introduction to designing with Salesforce","text":""},{"location":"faq/","title":"FAQ","text":"<p>todo</p>"},{"location":"faq/#er-det-laget-noe-anti-corruption-layer-mellom-salesforce-domenet-og-resten","title":"Er det laget noe anti-corruption-layer mellom Salesforce-domenet og resten?","text":"<p>Svar: kljsfdjlsdjf jsdl fj sdjflsjkdflj sdlfjklsdjflksdjf </p>"},{"location":"faq/#hvordan-unngar-man-at-salesforce-blir-en-flaskehals-ved-endringer-i-datamodellene-som-produserereskonsumeres-dette-sprsmalet-ma-spesifiseres-mer","title":"Hvordan unng\u00e5r man at Salesforce blir en flaskehals ved endringer i datamodellene som produsereres/konsumeres (dette sp\u00f8rsm\u00e5let m\u00e5 spesifiseres mer)","text":"<p>Svar:</p>"},{"location":"faq/#hvor-mye-konfigurasjon-er-det-ift-custom-kode","title":"Hvor mye konfigurasjon er det ift custom kode?","text":"<p>Svar:</p>"},{"location":"faq/#nar-er-salesforce-spot-on-og-nar-er-det-mindre-egnet","title":"N\u00e5r er Salesforce spot on, og n\u00e5r er det mindre egnet?","text":"<p>Svar:</p>"},{"location":"faq/#er-det-mulig-i-salesforce-a-ta-inn-frontend-biter-som-er-utviklet-pa-utsiden-og-som-inngar-i-en-flate-i-salesforce-men-som-utvikles-og-eies-pa-utsiden","title":"Er det mulig i Salesforce \u00e5 ta inn frontend-biter som er utviklet p\u00e5 utsiden, og som inng\u00e5r i en flate i Salesforce, men som utvikles og eies p\u00e5 utsiden?","text":""},{"location":"support/","title":"Support","text":""},{"location":"support/#contact-the-crm-platform-team","title":"Contact the CRM Platform Team","text":"<p>The team can be found on Slack - #crm-plattform-team</p>"},{"location":"deploy/troubleshooting/","title":"Feils\u00f8king","text":""},{"location":"deploy/troubleshooting/#problem-gpg-signering-til-git-failet","title":"Problem: gpg-signering til git failet.","text":"<p>Jeg fikk plutselig en feil der jeg ikke fikk lov \u00e5 commit fordi <pre><code> error: gpg failed to sign the data\n fatal: failed to write commit object\n</code></pre> Denne feilen oppsto etter at jeg hadde en verified commit tidligere i dag. \u00c5rsaken var at gpg-signeringen hadde hengt seg opp. Debug: <pre><code>GIT_TRACE=1 git commit -m \"commit message\"\n</code></pre> I teksten du f\u00e5r kommer dette: <pre><code>gpg --status-fd=2 -bsau &lt;din secret key&gt;.\n</code></pre> Kj\u00f8r kommandoen. <pre><code> gpg --status-fd=2 -bsau &lt;din secret key&gt;\n</code></pre> Der fikk jeg opp <code>[GNUPG:] BEGIN_SIGNING H8</code> og ikke noe mer. Det tyder p\u00e5 at kommandoen har hengt seg opp. For \u00e5 kille kommandoen, kj\u00f8r <pre><code>gpgconf --kill gpg-agent\n</code></pre> Etter det funket gpg-signering til git igjen.</p>"},{"location":"development/intro/","title":"Introduction to Salesforce Development","text":"<p>Salesforce development is an exciting field that allows you to create custom applications and solutions on the Salesforce Platform. Whether you're a seasoned developer or just starting out, here's a brief introduction to get you started:</p> <ol> <li>Platform Overview:</li> <li>The Salesforce Platform is a powerful cloud-based ecosystem that enables businesses to manage customer relationships, automate processes, and build custom applications.</li> <li> <p>It provides a suite of tools, including Sales Cloud (for sales automation), Service Cloud (for customer service), and Marketing Cloud (for marketing automation).</p> </li> <li> <p>Trailhead Learning Paths:</p> </li> <li>Trailhead is Salesforce's free online learning platform where you can acquire skills and earn badges.</li> <li> <p>The Platform Developer Beginner trail is a great starting point. It covers the basics of developing apps on the Salesforce Platform and includes the following modules:</p> <ul> <li>Get Ready to Develop: Understand the development environment and tools.</li> <li>Create a Data Model Using Clicks: Learn how to define objects, fields, and relationships.</li> <li>Write Business Logic in Apex: Dive into Apex, Salesforce's programming language.</li> <li>Build a Reusable UI Component with Lightning Web Components: Explore the modern UI framework for building Lightning components.</li> </ul> </li> <li> <p>Salesforce Developer Documentation:</p> </li> <li>The Salesforce Developers website provides comprehensive documentation, guides, and resources.</li> <li> <p>You'll find details on Apex, Lightning Web Components, Visualforce, Triggers, Flows, and more.</p> </li> <li> <p>Hands-On Practice:</p> </li> <li>The best way to learn is by doing! Create a developer org (a free Salesforce environment) and start building.</li> <li>Experiment with custom objects, fields, and relationships. Write Apex code to implement business logic.</li> <li>Explore Lightning App Builder to create custom Lightning apps and pages.</li> </ol> <p>Remember, Salesforce development is a journey. As you gain experience, you can explore advanced topics like integrations, APIs, and mobile app development. Happy coding! \ud83d\ude80\ud83d\udd27\ud83d\udc69\u200d\ud83d\udcbb.</p>"},{"location":"development/intro/#references","title":"References:","text":"<ul> <li>Platform Developer Beginner | Salesforce Trailhead</li> <li>Developer Documentation | Salesforce Developers</li> <li>Get Started with Salesforce Development | Salesforce Trailhead</li> </ul>"},{"location":"development/naming_conventions/","title":"Salesforce Naming Conventions","text":"<p>Naming Conventions for Customization and Configuration in Salesforce is an important consideration when creating custom modifications and applications on the platform.</p> <ol> <li>Descriptive and Specific Names: When naming custom objects, fields, or other components, choose descriptive and specific names. Avoid overly general terms like \u201cProductLine,\u201d which may have different meanings depending on context.</li> <li>Business Alignment: Opt for names that align with our organization\u2019s terminology. For example, use \u201cIncomeSupportProgram\u201d instead of generic terms to ensure consistency with business processes.</li> </ol> <p>Remember, adhering to these naming conventions enhances readability and facilitates efficient management of our Salesforce environment.</p>"},{"location":"development/naming_conventions/#1-language","title":"1. Language","text":"<p>Configurable metadata (such as Custom Objects, Custom Fields, Process Builder, Flows, Apex, etc.) is created and named in the English language. This applies to both labels, API names, and help text. For metadata where labels are visible to the user, these must be translated to Norwegian using the Translation Workbench. There are two main reasons for this approach:</p> <ol> <li>We want to adhere to English names at the database and backend level. This enhances the flow and readability of code, especially since English is already extensively used in standard functions and external libraries.</li> <li>External interfaces will face requirements to support multiple languages. By introducing translation functionality via the Translation Workbench at an early stage, adaptations are ready to be translated into multiple languages as needed.</li> </ol> <p>Remember that maintaining consistent naming conventions across different languages is crucial for clarity and maintainability in software development.</p>"},{"location":"development/naming_conventions/#2-casing-styles","title":"2. Casing Styles","text":"<p>When it comes to naming conventions, various casing styles exist. Let's explore the differences between them:</p>"},{"location":"development/naming_conventions/#snake-case","title":"Snake Case","text":"<ul> <li>In snake case, words are separated by underscores (<code>_</code>).</li> <li>All letters are in lowercase.</li> <li>Examples:<ul> <li><code>number_of_users = 34</code></li> <li><code>hello_phrase = \"Hello World\"</code></li> </ul> </li> </ul>"},{"location":"development/naming_conventions/#screaming-snake-case","title":"Screaming Snake Case","text":"<ul> <li>This variant of snake case uses all uppercase letters.</li> <li>Also known as the \"screaming snake case.\"</li> <li>Examples:<ul> <li><code>NUMBER_OF_USERS = 34</code></li> <li><code>HELLO_PHRASE = \"Hello World\"</code></li> </ul> </li> </ul>"},{"location":"development/naming_conventions/#kebab-case","title":"Kebab Case","text":"<ul> <li>Similar to snake case, but words are separated by dashes (<code>-</code>).</li> <li>All words are lowercase.</li> <li>Kebab case is a human-readable way to combine multiple words into a single identifier.</li> <li>Examples:<ul> <li><code>number-of-users = 34</code></li> <li><code>hello-phrase = \"Hello World\"</code></li> </ul> </li> </ul>"},{"location":"development/naming_conventions/#camel-case","title":"Camel Case","text":"<ul> <li>In camel case, the first word starts with a lowercase letter.</li> <li>Each subsequent word begins with an uppercase letter.</li> <li>Examples:<ul> <li><code>numberOfUsers = 34</code></li> <li><code>helloPhrase = \"Hello World\"</code></li> </ul> </li> </ul>"},{"location":"development/naming_conventions/#pascal-case","title":"Pascal Case","text":"<ul> <li>Similar to camel case, but the first letter of the first word is also capitalized.</li> <li>Every word starts with an uppercase letter.</li> <li>Examples:<ul> <li><code>NumberOfUsers = 34</code></li> <li><code>HelloPhrase = \"Hello World\"</code></li> </ul> </li> </ul> <p>Choose the appropriate casing style based on your programming language and coding conventions! \ud83d\ude80</p>"},{"location":"development/naming_conventions/#3-custom-objects","title":"3. Custom Objects","text":""},{"location":"development/naming_conventions/#rules-for-naming","title":"Rules for Naming","text":"<ul> <li>Object Label: Singular, Pascal Case</li> <li>Object Plural Label: Plural, Pascal Case</li> <li>Object Name (API Name): Singular, Pascal Case (without underscores beyond the mandatory \u201c__c\u201d)</li> </ul> <p>When naming custom objects within Salesforce, adhere to the following rules to ensure clarity and consistency:</p> <ol> <li> <p>Uniqueness: Custom object names must be unique across your organization. Begin each name with an uppercase letter.</p> </li> <li> <p>Descriptive and Whole Words: Use descriptive and whole words for object names. Avoid excessive use of acronyms and abbreviations.</p> </li> <li> <p>Singular Form: Choose singular names (e.g., \"Review\" instead of \"Reviews,\" or \"OrderItem\" instead of \"Order Items\").</p> </li> <li> <p>No Underscores: Avoid including underscores (\"_\") in object names.</p> </li> <li> <p>Consistent Object Label: Whenever possible, align the object label with the object name. Consistency between the label and name ensures ease of navigation within Salesforce and finding the object in the various setup UIs.</p> </li> <li> <p>English Language Naming: All naming conventions should be in English.</p> </li> <li> <p>Norwegian Translation: When translating labels and user-facing text to Norwegian, adhere to our organization\u2019s specific terminology. (Tip: Utilize Salesforce\u2019s Translation Workbench for translating labels and user-facing text to Norwegian.)</p> </li> </ol> <p>Remember, well-defined naming conventions contribute to a streamlined and efficient Salesforce configuration.</p>"},{"location":"development/naming_conventions/#prefixing","title":"Prefixing","text":"<p>As a general rule, avoid adding team names, application acronyms to object names. Instead use the description field to add team or application ownership to the object. (Another and better solution will be made for handling this later.)</p>"},{"location":"development/naming_conventions/#exceptions","title":"Exceptions","text":"<p>When naming custom objects within Salesforce, consider the following exceptions to enhance clarity and maintain consistency:</p> <ol> <li> <p>Acronyms and Abbreviations: Widely used and commonly understood acronyms and abbreviations can replace the long form. For instance, \"HTTP,\" \"URL,\" or \"NAV\" are acceptable.</p> </li> <li> <p>Underscores for Application Prefix: Adding an underscore is acceptable when prefixing the object name to denote its association with an application. For example:</p> </li> <li>Correct: OrderApplication_Order</li> <li>Correct: OrderApplication_OrderItem</li> <li>Note: OrderItem does not have any underscores.</li> </ol> <p>Remember, adhering to these exceptions ensures a balance between readability and precision in your naming conventions.</p>"},{"location":"development/naming_conventions/#demonstrative-example","title":"Demonstrative Example","text":"<p>The following are examples of custom object naming that should not be used </p> Object Name (API) Reason <code>CustAsset</code> Abbreviations have made this object name hard to understand <code>Orders</code> Object names should always be singular. <code>Order_Item</code> Object names should not have underscores. <p>The following are examples of the naming convention that will be used:</p> Object Name (API) Reason <code>CustomerAsset</code> Removing ambiguity from the name will improve readability and maintainability <code>Order</code> Making object names singular will ensure a standard naming convention across all objects. <code>OrderItem</code> Removing all underscores will help keep a standard naming convention as many times there are words that some may separate into two words and other may not. For example: <code>Zipcode</code> vs. <code>Zip Code</code>. <p>The following are examples shows valid naming conventions for Object Label, Object Plural Label and Object Name (API):</p> Object Label Object Plural Label Object Name (API) Shipping Invoice Shipping Invoices <code>ShippingInvoice__c</code> Inclusion Opportunity Inclusion Opportunities <code>InclusionOpportunity__c</code>"},{"location":"getting_started/access/","title":"Access from laptop","text":"<p>How to setup your developer environment so that you can check out code and start working.</p>"},{"location":"getting_started/access/#device-specific-installation-steps","title":"Device-specific installation steps","text":""},{"location":"getting_started/access/#windows-installation","title":"Windows Installation","text":"<p>You can either work directly from Windows or use WSL in order to develop in a Linux context from you Windows laptop</p>"},{"location":"getting_started/access/#native-windows-setup-using-scoop","title":"Native Windows setup using Scoop","text":"<p>Script that will install the basics for working with Salesforce on a clean Windows PC <pre><code>echo Install Scoop\ncall Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\ncall irm get.scoop.sh | iex\n\nclear\necho Add scoop buckets\ncall scoop bucket add java\ncall scoop bucket add extras\n\nclear\necho Install Java, nodejs, git and vsCode\ncall scoop install temurin17-jdk\ncall scoop install nodejs-lts\ncall scoop install git\ncall scoop install vscode\n\nclear\necho Install SF-cli\ncall npm install -global @salesforce/cli\n\n\nclear\necho Install Salesforce Extension Pack (Expanded)\ncall code --install-extension \"salesforce.salesforcedx-vscode-expanded\"\n\nclear\necho Set Java path for the plugin salesforcedx-vscode-apex.java.home in settings.json\n\n$scoopAppsHome = \"$HOME\\scoop\\apps\"\n$javaPath = \"$scoopAppsHome\\temurin17-jdk\\current\"\n$jsonVscodeUserSettingsPath = \"$scoopAppsHome\\vscode\\current\\data\\user-data\\User\\settings.json\"\n\n$vscodeUserSettingsJson = Get-Content \"$jsonVscodeUserSettingsPath\" -Raw | ConvertFrom-Json\n$vscodeUserSettingsJson | Add-Member -Force -MemberType NoteProperty -Name \"salesforcedx-vscode-apex.java.home\" -Value \"$javaPath\"\n$vscodeUserSettingsJson | ConvertTo-Json | Out-File \"$jsonVscodeUserSettingsPath\" -Encoding utf8\n\nclear\necho Salesforce utviklingsmilj\u00f8et er satt opp.\necho Neste steg er \u00e5 konfigurere git samt sjekke ut repoet du skal jobbe med\n</code></pre></p>"},{"location":"getting_started/access/#windows-with-wsl-installation","title":"Windows with WSL Installation","text":"<p>Before starting with this setup you should spend some time to familiarise yourself with WSL and remote development with WSL.</p>"},{"location":"getting_started/access/#resources","title":"Resources","text":"<ul> <li>Windows Subsystem for Linux Documentation<ul> <li>Get started using Visual Studio Code with Windows Subsystem for Linux</li> <li>Get started using Git on Windows Subsystem for Linux<ul> <li>Git Credential Manager setup</li> </ul> </li> </ul> </li> <li>VS Code Documentation<ul> <li>Developing in WSL</li> </ul> </li> </ul>"},{"location":"getting_started/access/#install-git-and-vs-code","title":"Install git and VS Code","text":"<ol> <li>Install Scoop unless you already have it.   Scoop makes it possible to install and maintain programs from the command line.</li> <li>Add buckets    <pre><code>scoop bucket add extras\n</code></pre></li> <li>Install GIT    <pre><code>scoop install git\n</code></pre></li> <li>Install vscode    <pre><code>scoop install vscode\n</code></pre></li> </ol>"},{"location":"getting_started/access/#setup-wsl","title":"Setup WSL","text":"<ol> <li>Open NAV Programvaresenter</li> <li>Install \"Windows Subsytem for Linux (WSL) - Vil restarte!\"</li> <li>Update WSL    <pre><code>wsl --update\n</code></pre></li> <li>Install your preferred Linux distro</li> </ol>"},{"location":"getting_started/access/#setup-ubuntu-wsl","title":"Setup Ubuntu WSL","text":"<ol> <li>Installer GIT     <pre><code>add-apt-repository ppa:git-core/ppa\n</code></pre> <pre><code>apt update\n</code></pre> <pre><code>apt install git\n</code></pre> <pre><code>git config --global credential.helper \"/mnt/c/Users/&lt;NAVIDENT&gt;/scoop/apps/git/current/mingw64/bin/git-credential-manager.exe\"\n</code></pre></li> <li>Install Node<ol> <li>Add sf-cli to Node    <pre><code>npm install @salesforce/cli --global\n</code></pre></li> </ol> </li> <li>Install Java<ol> <li>The Salesforce plugin for VS Code requires Java version 8,11 or 17. You can read more about it here. The following example uses temurin17 <pre><code>wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | sudo apt-key add -\n</code></pre> <pre><code>apt-get update\n</code></pre> <pre><code>apt-get install temurin-17-jdk\n</code></pre></li> </ol> </li> </ol>"},{"location":"getting_started/access/#setup-vs-code","title":"Setup VS Code","text":"<ol> <li>Install the Remote Development extension     <pre><code>code --install-extension \"ms-vscode-remote.vscode-remote-extensionpack\"\n</code></pre></li> <li>Installer Salesforce Extension    <code>code --install-extension \"salesforce.salesforcedx-vscode-expanded\"</code></li> <li>Oppdater Apex pluginen med Java Home<ol> <li>G\u00e5 til Settings</li> <li>Velg \"Remote [WSL:Ubuntu]\" (eller den versjonen du har lagt inn)</li> <li>Extensions =&gt; Salesforce Apex Configuration</li> <li>Sett Java Home til =&gt; <code>/usr/lib/jvm/temurin-17-jdk-amd64 (dersom du har et annet oppsett en det som er beskrevet her s\u00e5 legg inn den pathen du hadde.</code></li> </ol> </li> </ol>"},{"location":"getting_started/access/#install-and-setup-gpg-for-wsl","title":"Install and setup GPG for WSL","text":"<p>The repositories requires signed commits, here is a description of how to set this up with the WSL setup In Windows install GPG with Scoop <pre><code>scoop install gpg\n</code></pre> Then switch to your WSL installation and to GPG <pre><code>sudo apt-get install gpg gnupg gpg-agent\n</code></pre> Edit or create the config file <code>~/.gnupg/gpg-agent.conf</code> with the content below. IMPORTANT: set <code>pinentry-program</code> to point to your Windows installation of pinentry-basic.exe, [USER] must be set to your user. <pre><code>default-cache-ttl 34560000\nmax-cache-ttl 34560000\npinentry-program \"/mnt/c/Users/[USER]/scoop/apps/gpg/current/bin/pinentry-basic.exe\"\n</code></pre> The <code>pinentry-program</code> configuration explicitly tells GPG to use the pin entry app installed in Windows. </p> <p>Restart gpg <pre><code>gpgconf --kill gpg-agent\n</code></pre></p> <p>Proceed to generate GPG key pairs and add the key to your GitHub user.</p>"}]}